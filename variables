
# why we create private variables 

if variables are kept public, then users will be able to assign any random values to the variables which is not correct. We should retrict users to 
enter correct values only to the variables. Hence we set variables private and use its setter method.
If we do not want users to directly change value of variable, we set the variables as private so that we can assign a setter and getter method aorund it. 
Also, we can set some conditions or rules inside the setter getter methods to set a value of varialbe by user. This is called encapsulation.

   public String getAuthor() {
        return author;
    }

    // Setting rules to provide author name and handling exception if invalid username provided.
    public void setAuthor(String author) {
        if(!author.isEmpty() && author.matches("[a-zA-Z ]+")){
        this.author = author;
    } else {
        throw new IllegalArgumentException("enter valid author");
        }
    }

# this keyword
When instance variables and method parameters have the same name, this is used to differentiate between them.
 private String author;

    public Book(String author) {
        this.author = author; // 'this.author' refers to the instance variable, 'author' refers to the parameter
    }

why do we need wrapper classes ?
- collection framework, such as ArrayList, HashSet, etc., can only handle objects, not primitive types. 
  Wrapper classes provide a way to use primitives within these collections.
 - Java's collections are implemented using generics, which require a type parameter that must be an object 
  (a subclass of java.lang.Object). Primitive types like int, char, boolean, etc., are not objects and do not 
  inherit from java.lang.Object.
 - When you define a collection, you specify the type of elements it can contain using generics

   ArrayList<Integer> list = new ArrayList<>();  

 - Collections can store null values, which is useful to indicate the absence of a value. Primitives cannot 
   represent null.
 - 

